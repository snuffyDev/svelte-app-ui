@use "../../../stylesheet/base/functions" as *;
@use "../../../stylesheet/base/mixins" as *;
@use "../../../stylesheet/base/colors" as *;
@use "../../../stylesheet/theme" as *;

@use "sass:math";
@use "sass:color";

$sizes: (default, small, large);
$fill: (clear, default, outline, solid);
$widths: (block, full);

$hover: #fff !default;

@each $color in $color-names {
	.fill-solid[color="#{$color}"] {
		color: map-get($color-map, $color, "contrast");
	}

	:where(a, button)[color="#{$color}"] {
		@include pseudo {
			--c-primary-tint: #{map-get($color-map, $color, "tint")};

			--c-primary-base: #{map-get($color-map, $color, "base")};

			--c-primary-darker: #{map-get($color-map, $color, "darker")};

			--c-primary-contrast: #{map-get($color-map, $color, "contrast")};

			--c-primary-shade: #{map-get($color-map, $color, "shade")};
		}
	}
}

:where(.fill-clear) {
	@include pseudo {
		--bg-color: transparent;
		--bg-focused: var(--c-primary-base);
		--bg-hover: #{color.adjust($hover, $alpha: -0.6%)};
		--bg-active: #{color.adjust($hover, $alpha: -0.7%)};
		--bg-active-opacity: 0.3;
		--bg-hover-opacity: 0.2;
		--bg-focus-opacity: 0.1;
		--text-color: var(--c-primary-shade);
		--text-active-color: var(--c-primary-tint);
		--text-hover-color: var(--c-primary-base);
	}
}

:where(.fill-outline) {
	@include pseudo {
		--border-style: solid;
		--border-width: 0.0625rem;
		--border-radius: 0.5rem;
		--border-color: var(--c-primary-shade);
		--bg-active: var(--c-primary-tint);
		--bg-focused: var(--c-primary-base);
		--bg-color: transparent;
		--bg-hover: var(--c-primary-shade);
		--bg-focus-opacity: 0.15;
		--bg-hover-opacity: 0.075;
		--text-color: var(--c-primary-shade);
		--text-hover-color: var(--c-primary-base);
		--text-active-color: var(--c-primary-tint);
	}
}

:where(.fill-solid) {
	@include pseudo {
		--bg-active: var(--c-primary-shade);
		--bg-focused: var(--c-primary-shade);
		--bg-hover: var(--c-primary-tint);
		--bg-color: var(--c-primary-base);
		--text-color: var(--c-primary-tint);

		--bg-focus-opacity: 1;
		--bg-active-opacity: 1;
		--bg-hover-opacity: 0.25;
	}
}

:where(.strong) {
	font-weight: 550;
}

:where(.expand) {
	width: 100%;
}

:where([color="light"]) {
	--text-color: var(--c-primary-contrast);
}
:where(a, button) {
	position: relative;
	border-radius: var(--border-radius, 8px);
	border-width: var(--border-width, 1px);
	border-color: var(--border-color, transparent);
	border-style: var(--border-style, solid);
	background-color: var(--bg-color, transparent);
	user-select: none;

	color: var(--text-color, initial);
	touch-action: manipulation;
	transition: 400ms 0ms ease-out;
	text-shadow: 0px -0.2px 1px hsl(0deg 0% 0% / 20%);
	transition-property: color, background-color, opacity;
	font-family: "InterVariable";
	min-height: 2.75em;
	margin-top: 4px;
	margin-bottom: 4px;
	margin-left: 2px;
	margin-right: 2px;

	padding-bottom: 0;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.05em;
	font-size: 1em;
	isolation: isolate;
	letter-spacing: -0.03em;
	font-weight: 400;
	cursor: pointer;
	-webkit-user-select: none;

	&::after {
		content: "";
		position: absolute;
		user-select: none;
		inset: 0;
		transition: inherit;
		border-radius: inherit;
		pointer-events: none;
		user-select: none;
		z-index: 1;
		background-color: var(--c-primary-contrast, transparent);
		opacity: 0;
	}
	@media (hover: hover) {
		&:hover:not(:active) {
			// color: #{mix(map-get($color-map, "primary", "contrast"), rgba(0, 0, 0, 0.759), 5%)};
			&::after {
				content: "";

				opacity: var(--bg-hover-opacity, 0.01);
				background-color: var(--bg-active, transparent);
			}
		}
	}

	&:active {
		transition-duration: 0ms !important;
		transition-delay: 0ms !important;
		color: var(--text-active-color, initial);
		text-shadow: 0px -0.2px 5px hsl(0deg 0% 0% / 20%);
		opacity: var(--bg-active-opacity);
		background-color: var(--bg-active, transparent);
	}

	&:hover:active::after,
	&:active::after {
		transition-duration: 0ms !important;
		transition-duration: 0ms !important;
		box-shadow: 0px -0.5px 6px 0px rgba(0, 0, 0, 0.068) inset;
		background-color: var(--bg-hover, transparent);

		color: #{invert(
				adjust-color(
					map-get($color-map, "primary", "contrast"),
					$lightness: 50%
				)
			)};
		opacity: var(--bg-active-opacity, 0.1);
		// 	--f-clr-active,
	}
}

:where(.pill) {
	border-radius: 6rem;
}
